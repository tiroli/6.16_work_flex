.item1 {
    background-color: red;
}

.item2 {
    background-color: blue;
}

.item3 {
    background-color: green;
}

.flex div {
    color: white;
}

.flex {
    width: 500px;
    height: 200px;
    border: 1px solid;

    display: flex;
}

/* ======================================================================== */
/* 1. flex-basis */

/* 
    < flex-basis >

- 항목에 대한 주축 방향 크기를 결정짓는 속성으로 flex-direction 이 row 면
  너비를 column 이면 높이를 결정.
  기본값은 auto 로 할당되며, 이 경우 항목이 가지는 컨텐트의 크기가 flex-basis
  로 설정되어 그 크기만큼 공간을 점유.
  flex-basis 가 auto 가 아닌 이상, 항목에 할당된 너비(width)나 높이(height)
  보다 flex-basis 값이 우선 적용.
*/
.container1 .item1 {
    flex-basis: auto;
}

.container1 .item2 {
    flex-basis: 100px;
    width: 200px;
}

.container1 .item3 {
    flex-basis: 50%;
}

/* ======================================================================== */
/* 2. flex-grow */

/* 
    < flex-grow >

- 주축 내에 항목들을 배치하고 남는 공간에 대하여 flex-grow 를 항목별로
  할당함으로써 개별 항목에 대한 상대적 비율로 남는 공간을 배분하여 전체
  주축 공간을 모두 점유.
  단, 아이템의 컨텐트가 차지하고 남는 공간에 대한 상대적 비율을 점유함
  으로써 아이템 내 컨텐트가 존재하는 경우에는 요소간 비율이 지정한 비율과
  실제 일치하지 않을 수 있음에 주의.
*/
.container2 .item1 {
    /* flex-grow: 3; */
}

.container2 .item2 {
    /* flex-grow: 2; */
}

.container2 .item3 {
    /* flex-grow: 1; */

    /* 
        item3 에 할당된 basis 값과 item1, item2 가 갖는 컨텐트 크기를 제외한
        주축의 남는 공간에 대하여 grow 로 할당된 비율만큼 배분.
    */
    flex-basis:500px;
}

/* ======================================================================== */
/* 3. flex-shrink */

/* 
    < flex-shrink >

- flex-grow 에 상반된 특성을 가지는 속성으로 항목들의 크기가 주축의 전체
  크기를 오버플로우 했을 때 주축의 크기에 맞추어 개별 항목 별 상대적 줄어드는
  비율을 지정.
  값이 클수록 줄어드는 비율이 상대적으로 높아지는 특성.
*/
.container3 div {
    flex-basis: 300px;
}

.container3 .item1 {
    flex-shrink: 1;
}

.container3 .item2 {
    flex-shrink: 2;
}

.container3 .item3 {
    flex-shrink: 3;
}

/* ======================================================================== */
/* 4. basis, grow, shrink 활용 */

/* 
    항목들의 전체 크기가 플렉스 컨테이너의 크기를 벗어나지 않을 때는 동일한
    비율을 유지하되, 항목들의 크기가 컨테이너의 크기를 벗어날 때는 개별 항목에
    대한 비율을 다르게 표현되는 상황을 가정.
*/
.container4 div {
    flex-basis: 100px;
}

.container4 .item1 {
    flex-grow: 1;
}

.container4 .item2 {
    /* flex-grow: 1; */
}

.container4 .item3 {
    /* flex-grow: 1; */
}

.container4:hover {
    /* width: 200px; */
}

.container4:hover .item1 {
    /* flex-shrink: 1; */
}

.container4:hover .item2 {
    /* flex-shrink: 2; */
}

.container4:hover .item3 {
    /* flex-shrink: 3; */
}